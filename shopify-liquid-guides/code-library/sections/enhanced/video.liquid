<!-- Video Section - Enhanced Media Experience -->
{%- liquid
  assign unique = section.id | replace: '_', '' | downcase
  assign video_type = section.settings.video_type
  assign video_url = section.settings.video_url
  assign video_file = section.settings.video_file
  assign poster_image = section.settings.poster_image
  assign enable_autoplay = section.settings.enable_autoplay
  assign enable_loop = section.settings.enable_loop
  assign enable_muted = section.settings.enable_muted
  assign show_controls = section.settings.show_controls
  assign text_alignment = section.settings.text_alignment
  assign color_scheme = section.settings.color_scheme
  assign section_padding_top = section.settings.section_padding_top
  assign section_padding_bottom = section.settings.section_padding_bottom
  assign max_width = section.settings.max_width
  assign video_aspect_ratio = section.settings.video_aspect_ratio
  assign enable_full_width = section.settings.enable_full_width
  assign show_overlay = section.settings.show_overlay
  assign overlay_opacity = section.settings.overlay_opacity
  assign overlay_color = section.settings.overlay_color
-%}

<section
  id="video-{{ unique }}"
  class="video-section video-{{ unique }} color-scheme-{{ color_scheme }} aspect-{{ video_aspect_ratio }}"
  style="
    padding-top: {{ section_padding_top }}px;
    padding-bottom: {{ section_padding_bottom }}px;
  "
  data-section-id="{{ section.id }}"
  data-section-type="video"
  {% if section.settings.heading != blank %}aria-labelledby="video-heading-{{ unique }}"{% endif %}
>
  {%- unless enable_full_width -%}
    <div class="video-container" style="max-width: {{ max_width }}px;">
  {%- endunless -%}

    {%- if section.settings.heading != blank or section.settings.subheading != blank -%}
      <div class="video-content text-{{ text_alignment }}">
        {%- if section.settings.heading != blank -%}
          <h2
            id="video-heading-{{ unique }}"
            class="video-heading h2"
          >
            {{ section.settings.heading | escape }}
          </h2>
        {%- endif -%}

        {%- if section.settings.subheading != blank -%}
          <div class="video-subheading rte">
            {{ section.settings.subheading }}
          </div>
        {%- endif -%}
      </div>
    {%- endif -%}

    <div class="video-wrapper">
      {%- case video_type -%}
        {%- when 'youtube' -%}
          {%- if video_url contains 'youtube.com' or video_url contains 'youtu.be' -%}
            {%- liquid
              if video_url contains 'youtu.be'
                assign video_id = video_url | split: '/' | last
              elsif video_url contains 'watch?v='
                assign video_id = video_url | split: 'watch?v=' | last | split: '&' | first
              elsif video_url contains 'embed/'
                assign video_id = video_url | split: 'embed/' | last | split: '?' | first
              endif
            -%}

            <div
              class="video-embed video-youtube"
              data-video-type="youtube"
              data-video-id="{{ video_id }}"
              data-autoplay="{{ enable_autoplay }}"
              data-loop="{{ enable_loop }}"
              data-muted="{{ enable_muted }}"
              data-controls="{{ show_controls }}"
            >
              {%- if poster_image != blank -%}
                <div class="video-poster" data-video-poster>
                  <picture>
                    <source
                      media="(max-width: 749px)"
                      srcset="
                        {{ poster_image | image_url: width: 375 }} 375w,
                        {{ poster_image | image_url: width: 750 }} 750w
                      "
                      sizes="100vw"
                    >
                    <source
                      media="(min-width: 750px)"
                      srcset="
                        {{ poster_image | image_url: width: 990 }} 990w,
                        {{ poster_image | image_url: width: 1200 }} 1200w,
                        {{ poster_image | image_url: width: 1500 }} 1500w,
                        {{ poster_image | image_url: width: 1920 }} 1920w
                      "
                      sizes="100vw"
                    >
                    <img
                      src="{{ poster_image | image_url: width: 1200 }}"
                      alt="{{ poster_image.alt | default: 'Video poster' | escape }}"
                      loading="lazy"
                      width="{{ poster_image.width }}"
                      height="{{ poster_image.height }}"
                      class="video-poster-image"
                    >
                  </picture>
                  <button
                    class="video-play-button"
                    type="button"
                    aria-label="Play video"
                    data-video-play
                  >
                    <svg width="68" height="48" viewBox="0 0 68 48" aria-hidden="true">
                      <path d="M66.52 7.74c-.78-2.93-2.49-5.41-5.42-6.19C55.79.13 34 0 34 0S12.21.13 6.9 1.55c-2.93.78-4.63 3.26-5.42 6.19C.06 13.05 0 24 0 24s.06 10.95 1.48 16.26c.78 2.93 2.49 5.41 5.42 6.19C12.21 47.87 34 48 34 48s21.79-.13 27.1-1.55c2.93-.78 4.64-3.26 5.42-6.19C67.94 34.95 68 24 68 24s-.06-10.95-1.48-16.26Z" fill="currentColor"></path>
                      <path d="M45 24 27 14v20l18-10Z" fill="#fff"></path>
                    </svg>
                  </button>
                </div>
              {%- else -%}
                <iframe
                  src="https://www.youtube.com/embed/{{ video_id }}?{% if enable_autoplay %}autoplay=1&{% endif %}{% if enable_loop %}loop=1&playlist={{ video_id }}&{% endif %}{% if enable_muted %}mute=1&{% endif %}{% unless show_controls %}controls=0&{% endunless %}rel=0&modestbranding=1"
                  title="{{ section.settings.heading | default: 'Video' | escape }}"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen
                  loading="lazy"
                  class="video-iframe"
                ></iframe>
              {%- endif -%}
            </div>
          {%- endif -%}

        {%- when 'vimeo' -%}
          {%- if video_url contains 'vimeo.com' -%}
            {%- assign video_id = video_url | split: '/' | last | split: '?' | first -%}

            <div
              class="video-embed video-vimeo"
              data-video-type="vimeo"
              data-video-id="{{ video_id }}"
              data-autoplay="{{ enable_autoplay }}"
              data-loop="{{ enable_loop }}"
              data-muted="{{ enable_muted }}"
            >
              {%- if poster_image != blank -%}
                <div class="video-poster" data-video-poster>
                  <picture>
                    <source
                      media="(max-width: 749px)"
                      srcset="
                        {{ poster_image | image_url: width: 375 }} 375w,
                        {{ poster_image | image_url: width: 750 }} 750w
                      "
                      sizes="100vw"
                    >
                    <source
                      media="(min-width: 750px)"
                      srcset="
                        {{ poster_image | image_url: width: 990 }} 990w,
                        {{ poster_image | image_url: width: 1200 }} 1200w,
                        {{ poster_image | image_url: width: 1500 }} 1500w,
                        {{ poster_image | image_url: width: 1920 }} 1920w
                      "
                      sizes="100vw"
                    >
                    <img
                      src="{{ poster_image | image_url: width: 1200 }}"
                      alt="{{ poster_image.alt | default: 'Video poster' | escape }}"
                      loading="lazy"
                      width="{{ poster_image.width }}"
                      height="{{ poster_image.height }}"
                      class="video-poster-image"
                    >
                  </picture>
                  <button
                    class="video-play-button"
                    type="button"
                    aria-label="Play video"
                    data-video-play
                  >
                    <svg width="68" height="48" viewBox="0 0 68 48" aria-hidden="true">
                      <circle cx="34" cy="24" r="20" fill="currentColor" fill-opacity="0.8"></circle>
                      <path d="M41 24 29 17v14l12-7Z" fill="#fff"></path>
                    </svg>
                  </button>
                </div>
              {%- else -%}
                <iframe
                  src="https://player.vimeo.com/video/{{ video_id }}?{% if enable_autoplay %}autoplay=1&{% endif %}{% if enable_loop %}loop=1&{% endif %}{% if enable_muted %}muted=1&{% endif %}{% unless show_controls %}controls=0&{% endunless %}title=0&byline=0&portrait=0"
                  title="{{ section.settings.heading | default: 'Video' | escape }}"
                  frameborder="0"
                  allow="autoplay; fullscreen; picture-in-picture"
                  allowfullscreen
                  loading="lazy"
                  class="video-iframe"
                ></iframe>
              {%- endif -%}
            </div>
          {%- endif -%}

        {%- when 'hosted' -%}
          {%- if video_file != blank -%}
            <div class="video-embed video-hosted" data-video-type="hosted">
              <video
                class="video-element"
                {% if enable_autoplay %}autoplay{% endif %}
                {% if enable_loop %}loop{% endif %}
                {% if enable_muted %}muted{% endif %}
                {% if show_controls %}controls{% endif %}
                {% if poster_image != blank %}poster="{{ poster_image | image_url: width: 1200 }}"{% endif %}
                preload="metadata"
                playsinline
                aria-label="{{ section.settings.heading | default: 'Video content' | escape }}"
              >
                {%- comment -%} Using video_file.url directly is correct for Shopify-hosted files {%- endcomment -%}
                <source src="{{ video_file.url }}" type="{{ video_file.content_type }}">
                <p>Your browser does not support the video tag. <a href="{{ video_file.url }}" target="_blank" rel="noopener noreferrer">Download the video</a> instead.</p>
              </video>
            </div>
          {%- endif -%}
      {%- endcase -%}

      {%- if show_overlay and video_type != 'hosted' -%}
        <div
          class="video-overlay"
          style="
            background-color: {{ overlay_color | default: '#000000' }};
            opacity: {{ overlay_opacity | divided_by: 100.0 }};
          "
        ></div>
      {%- endif -%}
    </div>

    {%- if section.settings.caption != blank -%}
      <div class="video-caption text-{{ text_alignment }}">
        {{ section.settings.caption }}
      </div>
    {%- endif -%}

    {%- if section.settings.cta_text != blank and section.settings.cta_url != blank -%}
      <div class="video-cta text-{{ text_alignment }}">
        <a
          href="{{ section.settings.cta_url }}"
          class="btn btn-{{ section.settings.cta_style }}"
          {% if section.settings.cta_url contains 'http' %}
            target="_blank"
            rel="noopener noreferrer"
          {% endif %}
        >
          {{ section.settings.cta_text | escape }}
        </a>
      </div>
    {%- endif -%}

  {%- unless enable_full_width -%}
    </div>
  {%- endunless -%}
</section>

<style>
/* Video Section - {{ unique }} */
.video-{{ unique }} {
  position: relative;
  isolation: isolate;
}

.video-{{ unique }} .video-container {
  width: 100%;
  margin: 0 auto;
  padding: 0 20px;
}

/* Content Styling */
.video-{{ unique }} .video-content {
  margin-bottom: 32px;
}

.video-{{ unique }} .video-heading {
  margin: 0 0 16px 0;
  font-size: clamp(28px, 4vw, 48px);
  line-height: 1.2;
  font-weight: 700;
}

.video-{{ unique }} .video-subheading {
  margin: 0;
  font-size: 18px;
  line-height: 1.5;
  opacity: 0.9;
}

/* Video Wrapper */
.video-{{ unique }} .video-wrapper {
  position: relative;
  width: 100%;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  background: #000;
}

/* Aspect Ratios */
.video-{{ unique }}.aspect-16-9 .video-wrapper {
  aspect-ratio: 16 / 9;
}

.video-{{ unique }}.aspect-4-3 .video-wrapper {
  aspect-ratio: 4 / 3;
}

.video-{{ unique }}.aspect-1-1 .video-wrapper {
  aspect-ratio: 1 / 1;
}

.video-{{ unique }}.aspect-21-9 .video-wrapper {
  aspect-ratio: 21 / 9;
}

/* Video Elements */
.video-{{ unique }} .video-embed {
  position: relative;
  width: 100%;
  height: 100%;
}

.video-{{ unique }} .video-iframe,
.video-{{ unique }} .video-element {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none;
  display: block;
}

.video-{{ unique }} .video-element {
  object-fit: cover;
}

/* Poster and Play Button */
.video-{{ unique }} .video-poster {
  position: relative;
  width: 100%;
  height: 100%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.video-{{ unique }} .video-poster-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

.video-{{ unique }} .video-play-button {
  position: relative;
  z-index: 2;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  margin: 0;
  color: rgba(255, 255, 255, 0.9);
  transition: all 0.3s ease;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 80px;
  height: 80px;
}

.video-{{ unique }} .video-play-button:hover {
  transform: scale(1.1);
  color: #ffffff;
}

.video-{{ unique }} .video-play-button:focus {
  outline: 3px solid rgba(255, 255, 255, 0.8);
  outline-offset: 4px;
}

.video-{{ unique }} .video-play-button svg {
  width: 68px;
  height: 48px;
  filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.3));
}

/* Video Overlay */
.video-{{ unique }} .video-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
  pointer-events: none;
}

/* Caption and CTA */
.video-{{ unique }} .video-caption {
  margin-top: 16px;
  font-size: 14px;
  color: rgba(0, 0, 0, 0.7);
  font-style: italic;
}

.video-{{ unique }} .video-cta {
  margin-top: 32px;
}

.video-{{ unique }} .btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 16px 32px;
  border: 2px solid transparent;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-height: 50px;
}

.video-{{ unique }} .btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.video-{{ unique }} .btn-primary {
  background: var(--color-primary, #007bff);
  color: white;
}

.video-{{ unique }} .btn-secondary {
  background: var(--color-secondary, #6c757d);
  color: white;
}

.video-{{ unique }} .btn-outline {
  background: transparent;
  color: var(--color-primary, #007bff);
  border-color: var(--color-primary, #007bff);
}

/* Color Schemes */
.video-{{ unique }}.color-scheme-light {
  background: #ffffff;
  color: #333333;
}

.video-{{ unique }}.color-scheme-dark {
  background: #1a1a1a;
  color: #ffffff;
}

.video-{{ unique }}.color-scheme-dark .video-caption {
  color: rgba(255, 255, 255, 0.7);
}

/* Text Alignment */
.video-{{ unique }} .text-left {
  text-align: left;
}

.video-{{ unique }} .text-center {
  text-align: center;
}

.video-{{ unique }} .text-right {
  text-align: right;
}

/* Full Width */
.video-{{ unique }}.enable-full-width .video-wrapper {
  border-radius: 0;
  box-shadow: none;
}

/* Responsive Design */
@media (max-width: 749px) {
  .video-{{ unique }} .video-container {
    padding: 0 16px;
  }

  .video-{{ unique }} .video-content {
    margin-bottom: 24px;
  }

  .video-{{ unique }} .video-heading {
    font-size: clamp(24px, 6vw, 32px);
  }

  .video-{{ unique }} .video-subheading {
    font-size: 16px;
  }

  .video-{{ unique }} .video-play-button {
    width: 60px;
    height: 60px;
  }

  .video-{{ unique }} .video-play-button svg {
    width: 48px;
    height: 36px;
  }

  .video-{{ unique }} .btn {
    width: 100%;
    max-width: 300px;
  }
}

@media (max-width: 480px) {
  .video-{{ unique }} .video-container {
    padding: 0 12px;
  }

  .video-{{ unique }} .video-wrapper {
    border-radius: 8px;
  }

  .video-{{ unique }} .video-play-button {
    width: 50px;
    height: 50px;
  }

  .video-{{ unique }} .video-play-button svg {
    width: 40px;
    height: 30px;
  }
}

/* Focus styles for accessibility */
.video-{{ unique }} .btn:focus {
  outline: 2px solid var(--color-primary, #007bff);
  outline-offset: 2px;
}

/* High contrast mode */
@media (prefers-contrast: high) {
  .video-{{ unique }} .video-wrapper {
    border: 2px solid currentColor;
  }

  .video-{{ unique }} .video-play-button {
    background: rgba(0, 0, 0, 0.8);
  }
}

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  .video-{{ unique }} * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  .video-{{ unique }} .video-play-button:hover {
    transform: none;
  }
}

/* Loading state */
.video-{{ unique }} .video-embed.loading {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: video-loading-{{ unique }} 1.5s infinite;
}

@keyframes video-loading-{{ unique }} {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}
</style>

<script>
(function() {
  'use strict';

  const sectionId = '{{ unique }}';
  const videoSection = document.getElementById(`video-${sectionId}`);

  if (!videoSection) return;

  const videoEmbeds = videoSection.querySelectorAll('[data-video-type]');

  videoEmbeds.forEach(embed => {
    const videoType = embed.dataset.videoType;
    const videoId = embed.dataset.videoId;
    const poster = embed.querySelector('[data-video-poster]');
    const playButton = embed.querySelector('[data-video-play]');

    if (poster && playButton) {
      playButton.addEventListener('click', function() {
        loadVideo(embed, videoType, videoId);
      });

      // Keyboard support
      playButton.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          loadVideo(embed, videoType, videoId);
        }
      });
    }
  });

  function loadVideo(embed, type, id) {
    const autoplay = embed.dataset.autoplay === 'true';
    const loop = embed.dataset.loop === 'true';
    const muted = embed.dataset.muted === 'true';
    const controls = embed.dataset.controls === 'true';

    let iframeSrc = '';

    if (type === 'youtube') {
      iframeSrc = `https://www.youtube.com/embed/${id}?autoplay=1&${loop ? `loop=1&playlist=${id}&` : ''}${muted ? 'mute=1&' : ''}${!controls ? 'controls=0&' : ''}rel=0&modestbranding=1`;
    } else if (type === 'vimeo') {
      iframeSrc = `https://player.vimeo.com/video/${id}?autoplay=1&${loop ? 'loop=1&' : ''}${muted ? 'muted=1&' : ''}${!controls ? 'controls=0&' : ''}title=0&byline=0&portrait=0`;
    }

    if (iframeSrc) {
      const iframe = document.createElement('iframe');
      iframe.src = iframeSrc;
      iframe.className = 'video-iframe';
      iframe.frameBorder = '0';
      iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
      iframe.allowFullscreen = true;
      iframe.loading = 'eager';
      iframe.title = embed.closest('section').querySelector('.video-heading')?.textContent || 'Video';

      embed.innerHTML = '';
      embed.appendChild(iframe);

      // Analytics tracking (if available)
      if (typeof gtag !== 'undefined') {
        gtag('event', 'video_play', {
          'event_category': 'engagement',
          'event_label': type,
          'video_id': id
        });
      }
    }
  }

  // Intersection Observer for lazy loading
  if ('IntersectionObserver' in window) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const embed = entry.target;
          embed.classList.remove('loading');
          observer.unobserve(embed);
        }
      });
    }, {
      rootMargin: '50px'
    });

    videoEmbeds.forEach(embed => {
      embed.classList.add('loading');
      observer.observe(embed);
    });
  }
})();
</script>

{% schema %}
{
  "name": "Video",
  "tag": "section",
  "class": "section-video",
  "settings": [
    {
      "type": "header",
      "content": "Video Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "richtext",
      "id": "subheading",
      "label": "Subheading"
    },
    {
      "type": "select",
      "id": "video_type",
      "label": "Video type",
      "options": [
        {
          "value": "youtube",
          "label": "YouTube"
        },
        {
          "value": "vimeo",
          "label": "Vimeo"
        },
        {
          "value": "hosted",
          "label": "Hosted video"
        }
      ],
      "default": "youtube"
    },
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL",
      "info": "YouTube or Vimeo URL"
    },
    {
      "type": "video",
      "id": "video_file",
      "label": "Hosted video file",
      "info": "Upload MP4, MOV, or other video format"
    },
    {
      "type": "image_picker",
      "id": "poster_image",
      "label": "Poster image",
      "info": "Custom thumbnail for video. If not set, platform default will be used."
    },
    {
      "type": "text",
      "id": "caption",
      "label": "Video caption"
    },
    {
      "type": "header",
      "content": "Video Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_autoplay",
      "label": "Enable autoplay",
      "default": false,
      "info": "Videos may not autoplay on mobile devices"
    },
    {
      "type": "checkbox",
      "id": "enable_loop",
      "label": "Enable loop",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_muted",
      "label": "Mute by default",
      "default": true,
      "info": "Required for autoplay to work"
    },
    {
      "type": "checkbox",
      "id": "show_controls",
      "label": "Show video controls",
      "default": true
    },
    {
      "type": "select",
      "id": "video_aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "16-9",
          "label": "16:9 (Widescreen)"
        },
        {
          "value": "4-3",
          "label": "4:3 (Standard)"
        },
        {
          "value": "1-1",
          "label": "1:1 (Square)"
        },
        {
          "value": "21-9",
          "label": "21:9 (Ultrawide)"
        }
      ],
      "default": "16-9"
    },
    {
      "type": "header",
      "content": "Call to Action"
    },
    {
      "type": "text",
      "id": "cta_text",
      "label": "Button text"
    },
    {
      "type": "url",
      "id": "cta_url",
      "label": "Button link"
    },
    {
      "type": "select",
      "id": "cta_style",
      "label": "Button style",
      "options": [
        {
          "value": "primary",
          "label": "Primary"
        },
        {
          "value": "secondary",
          "label": "Secondary"
        },
        {
          "value": "outline",
          "label": "Outline"
        }
      ],
      "default": "primary"
    },
    {
      "type": "header",
      "content": "Overlay"
    },
    {
      "type": "checkbox",
      "id": "show_overlay",
      "label": "Show overlay",
      "default": false,
      "info": "Add colored overlay on top of video"
    },
    {
      "type": "color",
      "id": "overlay_color",
      "label": "Overlay color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "label": "Overlay opacity",
      "min": 0,
      "max": 80,
      "step": 5,
      "unit": "%",
      "default": 30
    },
    {
      "type": "header",
      "content": "Design"
    },
    {
      "type": "select",
      "id": "color_scheme",
      "label": "Color scheme",
      "options": [
        {
          "value": "light",
          "label": "Light"
        },
        {
          "value": "dark",
          "label": "Dark"
        }
      ],
      "default": "light"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "enable_full_width",
      "label": "Enable full width",
      "default": false,
      "info": "Video will extend to screen edges"
    },
    {
      "type": "range",
      "id": "max_width",
      "label": "Maximum width",
      "min": 600,
      "max": 1400,
      "step": 50,
      "unit": "px",
      "default": 1200
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "label": "Padding top",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "label": "Padding bottom",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "default": 60
    }
  ],
  "presets": [
    {
      "name": "Video",
      "settings": {
        "heading": "Watch our story",
        "video_type": "youtube",
        "video_aspect_ratio": "16-9",
        "text_alignment": "center",
        "color_scheme": "light",
        "enable_autoplay": false,
        "enable_muted": true,
        "show_controls": true,
        "section_padding_top": 60,
        "section_padding_bottom": 60
      }
    }
  ]
}
{% endschema %}